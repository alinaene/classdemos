{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# CS 237 Spring 2019\n",
    "# Author: Alina Ene (aene@bu.edu)\n",
    "# Used in L1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# CS 237: Two dice simulations\n",
    "\n",
    "In this notebook, we perform two experiments to empirically answer the following questions:\n",
    "\n",
    "> Q1: We roll a fair die repeatedly until we roll a 6. How many rolls do we expect?\n",
    "\n",
    "> Q2: We roll a fair die repeatedly until we roll a 6. How many rolls do we expect given than all the rolls gave even numbers?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from numpy.random import randint\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('seaborn')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# simulation for Q1\n",
    "# a single experiment\n",
    "def single_trial_Q1():\n",
    "    num_rolls = 0\n",
    "    while True:\n",
    "        num_rolls = num_rolls + 1\n",
    "        die_roll = randint(1, 7) #fair die roll\n",
    "        if die_roll == 6:\n",
    "            break\n",
    "    return num_rolls\n",
    "\n",
    "# perform N trials\n",
    "N = 1000\n",
    "rolls = []\n",
    "trial = [i + 1 for i in range(N)]\n",
    "for i in range(N):\n",
    "    num_rolls = single_trial_Q1()\n",
    "    rolls.append(num_rolls)\n",
    "\n",
    "avg_rolls = sum(rolls)\n",
    "avg_rolls = avg_rolls / N\n",
    "# plot results\n",
    "plt.bar(trial,rolls)\n",
    "plt.xlabel(\"Trial\")\n",
    "plt.ylabel(\"Number of rolls\")\n",
    "plt.title(\"average = \"  + str(avg_rolls),fontsize=20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# simulation for Q2\n",
    "# a single experiment\n",
    "def single_trial_Q2():\n",
    "    num_rolls = 0\n",
    "    while True:\n",
    "        num_rolls = num_rolls + 1\n",
    "        die_roll = randint(1, 7) #fair die roll\n",
    "        if die_roll == 1 or die_roll == 3 or die_roll == 5:\n",
    "            # restart the experiment\n",
    "            num_rolls = 0\n",
    "            continue\n",
    "        if die_roll == 6:\n",
    "            break\n",
    "    return num_rolls\n",
    "\n",
    "# perform N trials\n",
    "N = 10000\n",
    "rolls = []\n",
    "trial = [i + 1 for i in range(N)]\n",
    "for i in range(N):\n",
    "    num_rolls = single_trial_Q2()\n",
    "    rolls.append(num_rolls)\n",
    "\n",
    "avg_rolls = sum(rolls)\n",
    "avg_rolls = avg_rolls / N\n",
    "plt.bar(trial,rolls)\n",
    "plt.xlabel(\"Trial\")\n",
    "plt.ylabel(\"Number of rolls\")\n",
    "plt.title(\"average = \"  + str(avg_rolls),fontsize=20)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
